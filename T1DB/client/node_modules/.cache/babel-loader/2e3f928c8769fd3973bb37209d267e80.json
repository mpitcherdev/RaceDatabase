{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\micha\\\\OneDrive\\\\Desktop\\\\School\\\\Fall 2022\\\\Capstone\\\\Turn1Database\\\\T1DB\\\\client\\\\src\\\\components\\\\create.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport InputMask from \"react-input-mask\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Create() {\n  _s2();\n  var _s = $RefreshSig$();\n  const [form, setForm] = useState({\n    lastName: \"\",\n    track: \"\",\n    laptime: \"\",\n    notes: \"\",\n    condition: \"\"\n  });\n  const navigate = useNavigate();\n\n  // These methods will update the state properties.\n  function updateForm(value) {\n    return setForm(prev => {\n      return {\n        ...prev,\n        ...value\n      };\n    });\n  }\n\n  // This function will handle the submission.\n  async function onSubmit(e) {\n    e.preventDefault();\n\n    // When a post request is sent to the create url, we'll add a new record to the database.\n    const newRecord = {\n      ...form\n    };\n    await fetch(\"http://localhost:5000/record/add\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(newRecord)\n    }).catch(error => {\n      window.alert(error);\n      return;\n    });\n    setForm({\n      lastName: \"\",\n      track: \"\",\n      laptime: \"\",\n      notes: \"\",\n      condition: \"\"\n    });\n    navigate(\"/\");\n  }\n  //Lap time input mask for correct time format - x:xx:xxx(min, sec, ms)\n  function timeInput() {\n    _s();\n    const [time, setTime] = useState('');\n    const startsWithTwo = time[0] === '2';\n    const handleInput = _ref => {\n      let {\n        target: {\n          value\n        }\n      } = _ref;\n      return setTime(value);\n    };\n    const mask = [/[0-2]/, startsWithTwo ? /[0-3]/ : /[0-9]/, ':', /[0-5]/, /[0-9]/];\n    return /*#__PURE__*/_jsxDEV(InputMask, {\n      mask: mask,\n      onChange: handleInput,\n      value: time\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }, this);\n  }\n  // This following section will display the form that takes the input from the user.\n  _s(timeInput, \"Hg6GJEOPrRYP6nBVYT9gf4IWcwk=\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Create Lap Entry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"track\",\n            children: \"Last Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter last name\",\n            className: \"form-control\",\n            id: \"lastName\",\n            value: form.lastName,\n            onChange: e => updateForm({\n              lastName: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"track\",\n            children: \"Track\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter track name\",\n            className: \"form-control\",\n            id: \"track\",\n            value: form.track,\n            onChange: e => updateForm({\n              track: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"laptime\",\n            children: \"Lap Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"e.g. 1:23.456\",\n            className: \"form-control\",\n            id: \"laptime\",\n            value: form.laptime,\n            onChange: e => updateForm({\n              laptime: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"notes\",\n            children: \"Notes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Optional\",\n            className: \"form-control\",\n            id: \"notes\",\n            value: form.notes,\n            onChange: e => updateForm({\n              notes: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"txt-999\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            id: \"dry-wet-buttons\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"DryBtn\",\n              type: \"submit\",\n              value: \"Dry\",\n              className: \"btn btn-primary\",\n              onClick: e => updateForm({\n                condition: \"Dry\"\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"WetBtn\",\n              type: \"submit\",\n              value: \"Wet\",\n              className: \"btn btn-primary\",\n              onClick: e => updateForm({\n                condition: \"Wet\"\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n_s2(Create, \"CvgZ9Gvtjx+5bTNyyXuv5Vcd5OE=\", false, function () {\n  return [useNavigate];\n});\n_c = Create;\nvar _c;\n$RefreshReg$(_c, \"Create\");","map":{"version":3,"names":["React","useState","useNavigate","InputMask","Create","form","setForm","lastName","track","laptime","notes","condition","navigate","updateForm","value","prev","onSubmit","e","preventDefault","newRecord","fetch","method","headers","body","JSON","stringify","catch","error","window","alert","timeInput","time","setTime","startsWithTwo","handleInput","target","mask"],"sources":["C:/Users/micha/OneDrive/Desktop/School/Fall 2022/Capstone/Turn1Database/T1DB/client/src/components/create.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\nimport InputMask from \"react-input-mask\";\r\nexport default function Create() {\r\n    const [form, setForm] = useState({\r\n        lastName: \"\",\r\n        track: \"\",\r\n        laptime: \"\",\r\n        notes: \"\",       \r\n        condition: \"\",\r\n    });\r\n    const navigate = useNavigate();\r\n\r\n    // These methods will update the state properties.\r\n    function updateForm(value) {\r\n        return setForm((prev) => {\r\n            return { ...prev, ...value };\r\n        });\r\n    }\r\n\r\n    // This function will handle the submission.\r\n    async function onSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        // When a post request is sent to the create url, we'll add a new record to the database.\r\n        const newRecord = { ...form };\r\n\r\n        await fetch(\"http://localhost:5000/record/add\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(newRecord),\r\n        })\r\n            .catch(error => {\r\n                window.alert(error);\r\n                return;\r\n            });\r\n\r\n        setForm({ lastName: \"\", track: \"\", laptime: \"\", notes:\"\", condition: \"\",});\r\n        navigate(\"/\");\r\n    }\r\n    //Lap time input mask for correct time format - x:xx:xxx(min, sec, ms)\r\n    function timeInput() {\r\n        const [time, setTime] = useState('')\r\n        const startsWithTwo = time[0] === '2'\r\n\r\n        const handleInput = ({ target: { value } }) => setTime(value)\r\n\r\n        const mask = [\r\n            /[0-2]/,\r\n            startsWithTwo ? /[0-3]/ : /[0-9]/,\r\n            ':',\r\n            /[0-5]/,\r\n            /[0-9]/\r\n        ]\r\n    return <InputMask mask={mask} onChange={handleInput} value={time} />\r\n    }\r\n    // This following section will display the form that takes the input from the user.\r\n    return (\r\n        <div>\r\n            <form onSubmit={onSubmit}>\r\n                <div className=\"form-wrapper\">\r\n                    <h3>Create Lap Entry</h3>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"track\">Last Name</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Enter last name\"\r\n                            className=\"form-control\"\r\n                            id=\"lastName\"\r\n                            value={form.lastName}\r\n                            onChange={(e) => updateForm({ lastName: e.target.value })}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"track\">Track</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Enter track name\"\r\n                            className=\"form-control\"\r\n                            id=\"track\"\r\n                            value={form.track}\r\n                            onChange={(e) => updateForm({ track: e.target.value })}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"laptime\">Lap Time</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"e.g. 1:23.456\"\r\n                            className=\"form-control\"\r\n                            id=\"laptime\"\r\n                            value={form.laptime}\r\n                            onChange={(e) => updateForm({ laptime: e.target.value })}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"notes\">Notes</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Optional\"\r\n                            className=\"form-control\"\r\n                            id=\"notes\"\r\n                            value={form.notes}\r\n                            onChange={(e) => updateForm({ notes: e.target.value })}\r\n                        />\r\n                    </div><br></br>\r\n                    <div className=\"txt-999\">\r\n                        <div className=\"form-group\" id=\"dry-wet-buttons\">\r\n                            <input id=\"DryBtn\"\r\n                                type=\"submit\"\r\n                                value=\"Dry\"\r\n                                className=\"btn btn-primary\"\r\n                                onClick={(e) => updateForm({ condition: \"Dry\" })}\r\n                            />\r\n                            <input id=\"WetBtn\"\r\n                                type=\"submit\"\r\n                                value=\"Wet\"\r\n                                className=\"btn btn-primary\"\r\n                                onClick={(e) => updateForm({ condition: \"Wet\" })}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}